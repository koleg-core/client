stages:
  - üìútests
  - üê≥login
  - üèóbuild
  - üîísecurity
  - üöÄdeploy

.docker_login:
  image: docker:stable
  services:
    - docker:dind
  before_script:
    - >
      echo "$SCW_REGISTRY_TOKEN"
      | docker login
      --username $SCW_REGISTRY_USER
      $SCW_REGISTRY
      --password-stdin

üõèÔ∏ètests_coverage:
  stage: üìútests
  image: node:14.2.0
  script: |
    yarn
    yarn coverage

üê≥dockerfile_lint:
  stage: üìútests
  image: hadolint/hadolint
  script: |
    hadolint -c .hadolint.yaml Dockerfile

üî•build_prod:
  stage: üèóbuild
  extends: .docker_login
  script: |
    docker pull \
      $SCW_REGISTRY/$IMAGE_NAME:latest || true
    docker build \
      -t $SCW_REGISTRY/$IMAGE_NAME:latest \
      -t $SCW_REGISTRY/$IMAGE_NAME:$CI_COMMIT_SHA \
      --cache-from $SCW_REGISTRY/$IMAGE_NAME:latest \
      .
    echo "Push image to registry"
    docker push \
      $SCW_REGISTRY/$IMAGE_NAME:latest
    docker push \
      $SCW_REGISTRY/$IMAGE_NAME:$CI_COMMIT_SHA

‚ò∏Ô∏èproduction_deploy:
  stage: üöÄdeploy
  image: google/cloud-sdk
  only:
    - master
    - develop
  script: |
    echo "Deploy on branch: ${CI_COMMIT_BRANCH}"
    kubectl \
      set image deployment/$IMAGE_NAME \
      ${IMAGE_NAME}=${SCW_REGISTRY}/${IMAGE_NAME}:${CI_COMMIT_SHA} \
      --namespace "${CI_COMMIT_BRANCH}" \
      --kubeconfig "$SCW_KUBECONFIG" \
      --record
    kubectl \
      rollout status deployment/$IMAGE_NAME \
      --timeout=5m \
      --namespace "${CI_COMMIT_BRANCH}" \
      --kubeconfig $SCW_KUBECONFIG \
    || ( kubectl \
        --namespace "${CI_COMMIT_BRANCH}" \
        --kubeconfig $SCW_KUBECONFIG \
        rollout undo deployment/$IMAGE_NAME \
        && echo "‚ùå deployment failed, return to previous deployment" \
        && exit 1 )
